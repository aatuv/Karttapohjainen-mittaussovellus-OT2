{"version":3,"sources":["components/Anturi.js","components/Anturit.js","components/Kartta.js","components/KartanLisays.js","components/Valintalaatikko.js","components/Graafit.js","components/Mittausrivi.js","components/Mittaukset.js","components/Mittaustaulu.js","components/AnturiOnline.js","App.js","serviceWorker.js","index.js"],"names":["Anturi","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","anturiStyle","onkoSijainti","onkoValittu","undefined","anturiSijainti","selectedAnturi","id","anturi","backgroundColor","left","concat","x","top","y","transform","React","createRef","react_default","a","createElement","style","padding","color","borderRadius","label","value","config","draggable","pressable","init","scale","press","dragBounds","right","dimensions","width","bottom","height","transition","AnturiComponent","posed","div","OverlayTrigger_default","placement","delay","show","hide","overlay","renderTooltip","ref","flipMove","onDragEnd","bind","className","Component","Anturit","anturit","map","components_Anturi","key","anturiSijainnit","find","anturi_id","selectedKarttaId","kartta_id","setSijainti","setDefaultSijainti","setSelectedAnturi","Kartta","state","loading","onLoad","assertThisInitialized","setState","e","k","target","parentElement","document","querySelector","kartta","getBoundingClientRect","offsetX","Math","round","pageX","offsetY","pageY","_ref","offsetHeight","offsetWidth","selectedKartta","Image_default","src","fluid","components_Anturit","KartanLisays","context","fileUploadHandler","fd","FormData","append","selectedFile","newKartta","uploadInProgress","axios","post","onUploadProgress","ProgressEvent","uploadProgress","loaded","total","then","res","handleClose","handleShowSuccess","data","name","path","addKartta","catch","error","message","response","statusText","handleShowError","action","handleShow","modalOpen","imgPreviewURL","_this2","preventDefault","file","files","reader","FileReader","onloadend","result","readAsDataURL","progress","_this3","inProgress","imgPreview","ProgressBar_default","animated","now","thumbnail","Fragment","Modal_default","onHide","size","Header","closeButton","Title","Body","type","accept","maxLength","onChange","fileSelectedHandler","Footer","Button_default","variant","onClick","createOption","Valintalaatikko","isLoading","showSuccess","showError","errorMsg","maxInputLenght","Promise","resolve","setTimeout","handleKChange","newValue","setSelectedKartta","handleAChange","handleCreate","inputValue","karttaOptions","kartat","filter","toLowerCase","includes","anturiOptions","promiseKartat","promiseAnturit","setNewKartta","modalCloseHandler","LisaysModal","components_KartanLisays","flex","margin","Alert_default","AsyncCreatable_default","JSON","stringify","placeholder","isClearable","formatCreateLabel","userInput","defaultOptions","isDisabled","onInputChange","length","maxKarttaInputLenght","substr","loadOptions","onCreateOption","Async_default","Graafit","_Component","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","getLOption","title","text","tooltip","trigger","xAxis","nameLocation","nameTextStyle","fontSize","fontWeight","nameGap","ajat","yAxis","max","min","nameRotate","series","lampotilat","sampling","getPOption","paineet","getKOption","kosteudet","inherits","createClass","lib_default","option","Mittausrivi","mittaus","Time","temperature","pressure","humidity","Mittaukset","mittaukset","components_Mittausrivi","messageId","Mittaustaulu","amount","scrollToBottom","alariviRef","current","scrollIntoView","behavior","block","inline","Table_default","striped","bordered","hover","textAlign","overflowY","display","components_Mittaukset","AnturiOnline","split1","split2","mit","replace","split","Date","online","Heading","App","anturiOnline","deleteSuccess","returnKartat","tmp","push","ID","NAME","PATH","returnAnturit","DESCRIPTION","selected","returnAnturiSijainnit","sijainnit","sijainti","KARTTA_ID","ANTURI_ID","X","Y","Axios","getKartat","get","getAnturiSijainnit","handleDeleteSuccess","getMittaukset","getAnturit","setInterval","_this4","_this5","temps","len","splice","hums","pres","tims","_this6","delete","params","console","log","components_Valintalaatikko","disabled","isKarttaSelected","deleteKartta","components_Kartta","components_AnturiOnline","components_Mittaustaulu","components_Graafit","returnLampotilaData","returnKosteusData","returnPaineData","returnTimeData","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f192a01.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport posed from 'react-pose';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass Anturi extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.anturi = React.createRef();\r\n    }\r\n\r\n    anturiStyle = () => {\r\n        let onkoSijainti = false;\r\n        let onkoValittu = false;\r\n        if (this.props.anturiSijainti !== undefined) {\r\n            onkoSijainti = true;\r\n        }\r\n        if (this.props.selectedAnturi !== null) {\r\n            if (this.props.selectedAnturi.id === this.props.anturi.id) {\r\n                onkoValittu = true;\r\n            }\r\n        }\r\n        return {\r\n            backgroundColor: onkoValittu ? \"#0e5f20\" : \"#1ac940\",\r\n            left: onkoSijainti ? `${this.props.anturiSijainti.x - 15}px` : '0px',\r\n            top: onkoSijainti ? `${this.props.anturiSijainti.y - 15}px` : '0px',\r\n            transform: 'translateX(0px) translateY(0px)'\r\n        }\r\n    }\r\n\r\n    // kun kursori anturipallon päällä\r\n    renderTooltip() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    backgroundColor: 'rgba(0, 0, 0, 0.85)',\r\n                    padding: '2px 10px',\r\n                    color: 'white',\r\n                    borderRadius: 3,\r\n                }}\r\n            >\r\n                {this.props.anturi.label} {this.props.anturi.value}\r\n            </div>\r\n        )\r\n    }\r\n    render() {\r\n        var config = null;\r\n        if (typeof (this.props.anturiSijainti) === 'undefined') {\r\n            config = {\r\n                draggable: true,\r\n                pressable: true,\r\n                init: { scale: 1 },\r\n                press: { scale: 0.7 },\r\n                dragBounds: {\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: this.props.dimensions.width,\r\n                    bottom: this.props.dimensions.height\r\n                },\r\n                transition: {\r\n                    x: 0,\r\n                    y: 0\r\n                }\r\n            }\r\n        } else {\r\n            config = {\r\n                draggable: true,\r\n                pressable: true,\r\n                init: { scale: 1 },\r\n                press: { scale: 0.7 },\r\n                dragBounds: {\r\n                    top: -this.props.anturiSijainti.y,\r\n                    left: -this.props.anturiSijainti.x,\r\n                    right: this.props.dimensions.width - this.props.anturiSijainti.x,\r\n                    bottom: this.props.dimensions.height - this.props.anturiSijainti.y\r\n                },\r\n                transition: {\r\n                    x: 0,\r\n                    y: 0\r\n                }\r\n            }\r\n        }\r\n\r\n        const AnturiComponent = posed.div(config);\r\n        return (\r\n            <OverlayTrigger\r\n                placement=\"right-start\"\r\n                delay={{ show: 250, hide: 400 }}\r\n                overlay={this.renderTooltip()}\r\n            >\r\n                <AnturiComponent\r\n                    ref={this.anturi}\r\n                    flipMove={false}\r\n                    id={this.props.anturi.id}\r\n                    onDragEnd={this.props.onDragEnd.bind(this)}\r\n                    style={this.anturiStyle()}\r\n                    className=\"anturiComponent\"\r\n                />\r\n            </OverlayTrigger>\r\n        )\r\n    }\r\n}\r\n\r\n//PropTypes\r\nAnturi.propTypes = {\r\n    anturi: PropTypes.object.isRequired,\r\n    selectedAnturi: PropTypes.object,\r\n    selectedKarttaId: PropTypes.number.isRequired,\r\n    dimensions: PropTypes.object,\r\n    onDragEnd: PropTypes.func.isRequired,\r\n    anturiSijainti: PropTypes.object,\r\n    setSijainti: PropTypes.func.isRequired,\r\n    setDefaultSijainti: PropTypes.func.isRequired\r\n}\r\nexport default Anturi;\r\n","import React, { Component } from 'react';\r\nimport Anturi from './Anturi';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass Anturit extends Component {\r\n\r\n  render() {\r\n    return this.props.anturit.map((anturi) => (\r\n      <Anturi \r\n      key={anturi.id} \r\n      dimensions={this.props.dimensions} \r\n      anturi={anturi} \r\n      selectedAnturi={this.props.selectedAnturi} \r\n      onDragEnd={this.props.onDragEnd} \r\n      anturiSijainti={this.props.anturiSijainnit.find(anturiSijainti => {\r\n      /* anturin sijainti on uniikki kullakin kartalla \r\n       * (esim. tilanne, jossa samaa anturia esim. siirrettäisiin kahteen eri paikkaan tms.)\r\n       */\r\n          if (anturi.id === anturiSijainti.anturi_id && this.props.selectedKarttaId === anturiSijainti.kartta_id) {\r\n            return anturiSijainti\r\n          } \r\n          return null;\r\n        })} \r\n      selectedKarttaId={this.props.selectedKarttaId}\r\n      setSijainti={this.props.setSijainti}\r\n      setDefaultSijainti={this.props.setDefaultSijainti}\r\n      setSelectedAnturi={this.props.setSelectedAnturi}\r\n      />\r\n  ));\r\n  }\r\n}\r\n\r\n//PropTypes\r\nAnturit.propTypes = {\r\n  anturit: PropTypes.array.isRequired,\r\n  dimensions: PropTypes.object.isRequired,\r\n  selectedAnturi: PropTypes.object,\r\n  onDragEnd: PropTypes.func.isRequired,\r\n  anturiSijainnit: PropTypes.array.isRequired,\r\n  selectedAnturiId: PropTypes.number,\r\n  selectedKarttaId: PropTypes.number.isRequired,\r\n  setSijainti: PropTypes.func.isRequired,\r\n  setDefaultSijainti: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Anturit;","import React, { Component } from 'react';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Anturit from './Anturit';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Kartta extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ref = React.createRef();\r\n        this.onLoad = this.onLoad.bind(this);\r\n    }\r\n    state = {\r\n        loading: true,\r\n        dimensions: {},\r\n        x: 0,\r\n        y: 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            loading: true\r\n        })\r\n    }\r\n    // päivitetään anturin paikka kartan päällä\r\n    onDragEnd(e) {\r\n        var k = e.target.parentElement;\r\n        if (k === null) {\r\n            k = document.querySelector('div.kartta');\r\n        }\r\n        const kartta = k.getBoundingClientRect();\r\n        const offsetX = Math.round(e.pageX - kartta.left);\r\n        const offsetY = Math.round(e.pageY - kartta.top);\r\n        if (offsetX < 0 || offsetX > kartta.width || offsetY < 0 || offsetY > kartta.height) { // ei tallenneta koordinaatteja, jos kursori viedään yli kartasta\r\n            return;\r\n        }\r\n        e.target.style.left = offsetX;\r\n        e.target.style.top = offsetY;\r\n        this.props.setSijainti(offsetX, offsetY, this.props.selectedKarttaId, this.props.anturi.id);\r\n    }\r\n    // ladatessa kuvatiedosto, asetetaan komponentin tilaan sen isäelementin (johon kuva sovittuu) mitat\r\n    onLoad({ target: div }) {\r\n        this.setState({\r\n            dimensions: {\r\n                height: div.offsetHeight,\r\n                width: div.offsetWidth\r\n            },\r\n            loading: false\r\n        })\r\n    }\r\n    // renderöidään komponentti\r\n    render() {\r\n        if (this.props.selectedKartta != null) {\r\n            return (\r\n                <div onLoad={this.onLoad} className=\"kartta\">\r\n                    <Image ref={this.ref} className=\"img-kartta\" src={this.props.selectedKartta.value} fluid />\r\n                    <Anturit\r\n                        anturit={this.props.anturit}\r\n                        dimensions={this.state.dimensions}\r\n                        selectedAnturi={this.props.selectedAnturi}\r\n                        anturiSijainnit={this.props.anturiSijainnit}\r\n                        onDragEnd={this.onDragEnd}\r\n                        selectedKarttaId={this.props.selectedKartta.id}\r\n                        setSijainti={this.props.setSijainti}\r\n                        setDefaultSijainti={this.props.setDefaultSijainti}\r\n                        setSelectedAnturi={this.props.setSelectedAnturi}\r\n                    />\r\n                </div>\r\n            )\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n//PropTypes\r\nKartta.propTypes = {\r\n    selectedKartta: PropTypes.object,\r\n    anturit: PropTypes.array.isRequired,\r\n    selectedAnturi: PropTypes.object,\r\n    anturiSijainnit: PropTypes.array.isRequired,\r\n    setSijainti: PropTypes.func.isRequired,\r\n    setDefaultSijainti: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default Kartta;\r\n","import React, { Component } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\nimport Image from 'react-bootstrap/Image';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\n\r\n\r\n// modal kartan lisäykseen\r\nclass KartanLisays extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.handleShow = this.handleShow.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n\r\n\r\n    this.state = {\r\n      show: this.props.modalOpen,\r\n      selectedFile: null,\r\n      imgPreviewURL: '',\r\n      uploadInProgress: false,\r\n      uploadProgress: null\r\n    };\r\n  }\r\n\r\n  // käsitellään valittu tiedosto\r\n  fileSelectedHandler(e) {\r\n    e.preventDefault();\r\n    let file = e.target.files[0];\r\n    let reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      this.setState({\r\n        selectedFile: file,\r\n        imgPreviewURL: reader.result\r\n      });\r\n    }\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  // kuvatiedoston lähettäminen googlen firebase-pilvipalvelimelle\r\n  fileUploadHandler = () => {\r\n    const fd = new FormData();\r\n    fd.append('image', this.state.selectedFile, this.props.newKartta.label);\r\n    this.setState({ uploadInProgress: true });\r\n    axios.post('https://us-central1-mittarointi-sovellus.cloudfunctions.net/onFileUpload', fd, {\r\n      onUploadProgress: ProgressEvent => {\r\n        this.setState({\r\n          uploadProgress: Math.round(ProgressEvent.loaded / ProgressEvent.total * 100)\r\n        });\r\n      }\r\n    })\r\n      .then(res => {\r\n        this.handleClose();\r\n        this.props.handleShowSuccess();\r\n        const newKartta = {\r\n          label: res.data.name,\r\n          value: res.data.path\r\n        }\r\n        this.props.addKartta(newKartta);\r\n      }).catch((error) => {\r\n        let message = error.response.statusText;\r\n        this.setState({\r\n          show: false,\r\n          uploadInProgress: false\r\n        });\r\n          this.props.handleShowError(message);\r\n        this.props.action();\r\n      });\r\n  }\r\n\r\n\r\n  handleShow() {\r\n    this.setState({ show: true });\r\n  }\r\n  handleClose() {\r\n    this.setState({\r\n      show: false,\r\n      uploadInProgress: false\r\n    });\r\n    this.props.action();\r\n  }\r\n\r\n  render() {\r\n    const inProgress = this.state.uploadInProgress;\r\n    const imgPreviewURL = this.state.imgPreviewURL;\r\n    let progress;\r\n    let imgPreview = null;\r\n    if (inProgress) {\r\n      progress = <div>Tallennetaan... <ProgressBar animated now={this.state.uploadProgress} /></div>\r\n    } else {\r\n      progress = null;\r\n    }\r\n    if (imgPreviewURL) {\r\n      imgPreview =\r\n        <div className=\"img-preview-div\">\r\n          <Image className=\"img-preview\" src={imgPreviewURL} thumbnail />\r\n        </div>\r\n    }\r\n    return (\r\n      <>\r\n        <Modal show={this.state.show} onHide={this.handleClose} size=\"lg\">\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Lisää kartta (jpeg/png)</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <input type=\"file\" accept=\"image/*\" maxLength=\"30\" onChange={(e) => this.fileSelectedHandler(e)} />\r\n            {progress}\r\n            {imgPreview}\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.handleClose}>\r\n              Peruuta\r\n              </Button>\r\n            <Button variant=\"primary\" onClick={this.fileUploadHandler}>\r\n              Tallenna\r\n              </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n// PropTypes\r\nKartanLisays.propTypes = {\r\n  kartat: PropTypes.array.isRequired,\r\n  addKartta: PropTypes.func.isRequired,\r\n  newKartta: PropTypes.object.isRequired,\r\n  setNewKartta: PropTypes.func.isRequired,\r\n  handleShowSuccess: PropTypes.func.isRequired,\r\n  handleShowError: PropTypes.func.isRequired,\r\n  modalOpen: PropTypes.bool.isRequired,\r\n  action: PropTypes.func.isRequired\r\n}\r\n\r\nexport default KartanLisays;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ASyncSelect from 'react-select/lib/Async';\r\nimport ASyncCreatableSelect from 'react-select/lib/AsyncCreatable';\r\nimport KartanLisays from './KartanLisays';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\n\r\n\r\n// luodaan alasvetovalikkoon uusi pohja\r\nconst createOption = (label) => ({\r\n    label: label,\r\n    value: null\r\n});\r\n\r\nclass Valintalaatikko extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.newKartta = null;\r\n        this.modalCloseHandler = this.modalCloseHandler.bind(this);\r\n        this.handleShowError = this.handleShowError.bind(this);\r\n\r\n    }\r\n    state = {\r\n        isLoading: false,\r\n        kartta: null,\r\n        anturi: null,\r\n        modalOpen: false,\r\n        showSuccess: false,\r\n        showError: false,\r\n        errorMsg: null,\r\n        maxInputLenght: 30\r\n    };\r\n\r\n    // kartan lisäysikkunan sulkeminen\r\n    modalCloseHandler() {\r\n        this.setState({\r\n            isLoading: false,\r\n            modalOpen: false\r\n        })\r\n    }\r\n    // näytetään ilmoitus, kun kartan lisäys onnistuu\r\n    handleShowSuccess = () => {\r\n        new Promise(resolve => {\r\n            setTimeout(\r\n                resolve(this.setState({\r\n                    showSuccess: true\r\n                }), 1000))\r\n        }).then(() => {\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    showSuccess: false\r\n                })\r\n            }, 1000);\r\n        })\r\n    }\r\n    // näytetään virheilmoitus, jos kartan lisäys epäonnistuu\r\n    handleShowError = (message) => {\r\n        new Promise(resolve => {\r\n            setTimeout(\r\n                resolve(this.setState({\r\n                    showError: true,\r\n                    errorMsg: message\r\n                }), 1000))\r\n        }).then(() => {\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    showError: false\r\n                })\r\n            }, 1000);\r\n        })\r\n    }\r\n\r\n    // käsitellään kartan valinnan muutokset alasvetovalikossa\r\n    handleKChange = (newValue) => {\r\n        this.setState({ kartta: newValue });\r\n        this.props.setSelectedKartta(newValue);\r\n    };\r\n\r\n    // käsitellään anturin valinnan muutokset alasvetovalikossa\r\n    handleAChange = (newValue) => {\r\n        this.setState({ anturi: newValue });\r\n        this.props.setSelectedAnturi(newValue);\r\n    };\r\n\r\n    // uuden kartan luonnin käsittely\r\n    handleCreate = (inputValue) => {\r\n        this.setState({ isLoading: true, modalOpen: true });\r\n        this.newKartta = createOption(inputValue);\r\n    };\r\n\r\n    // palauttaa karttavaihtoehdot hakusyötteen mukaan\r\n    karttaOptions = (inputValue) => {\r\n        return this.props.kartat.filter(kartta =>\r\n            kartta.label.toLowerCase().includes(inputValue.toLowerCase())\r\n        );\r\n    };\r\n\r\n    // palauttaa anturivaihtoehdot hakusyötteen mukaan\r\n    anturiOptions = (inputValue) => {\r\n        return this.props.anturit.filter(anturi =>\r\n            anturi.label.toLowerCase().includes(inputValue.toLowerCase())\r\n        );\r\n    };\r\n\r\n    // karttavaihtoehdot\r\n    promiseKartat = inputValue =>\r\n        new Promise(resolve => {\r\n            setTimeout(() => {\r\n                resolve(this.karttaOptions(inputValue));\r\n            }, 1000);\r\n        });\r\n\r\n    // anturivaihtoehdot\r\n    promiseAnturit = inputValue =>\r\n        new Promise(resolve => {\r\n            setTimeout(() => {\r\n                resolve(this.anturiOptions(inputValue));\r\n            }, 1000);\r\n        });\r\n\r\n    // asetetaan uusi kartta\r\n    setNewKartta = (newKartta) => {\r\n        this.newKartta = newKartta;\r\n    }\r\n\r\n\r\n    render() {\r\n        // kartan lisäysikkuna näytetään vain, jos käyttäjä painaa lisäysnappia alasvetovalikossa\r\n        let LisaysModal;\r\n\r\n        if (this.state.modalOpen) {\r\n            LisaysModal =\r\n                <KartanLisays\r\n                    kartat={this.props.kartat}\r\n                    addKartta={this.props.addKartta}\r\n                    newKartta={this.newKartta}\r\n                    setNewKartta={this.setNewKartta}\r\n                    modalOpen={this.state.modalOpen}\r\n                    handleShowSuccess={this.handleShowSuccess}\r\n                    handleShowError={this.handleShowError}\r\n                    action={this.modalCloseHandler}\r\n                />\r\n        } else {\r\n            LisaysModal = null;\r\n        }\r\n        return (\r\n            <div style={{ flex: '1 1 auto', margin: '5px' }}>\r\n                <Modal show={this.state.showSuccess}>\r\n                    <Modal.Body>\r\n                        <Alert variant=\"success\">\r\n                            <p>Kartan lisäys onnistui!</p>\r\n                        </Alert>\r\n                    </Modal.Body>\r\n                </Modal>\r\n                <Modal show={this.state.showError}>\r\n                    <Modal.Body>\r\n                        <Alert variant=\"danger\">\r\n                            {this.state.errorMsg}\r\n                        </Alert>\r\n                    </Modal.Body>\r\n                </Modal>\r\n                <div className=\"row valinnat\">\r\n                    <div className=\"col-md-5\">Etsi, lisää, selaa ja valitse karttoja:</div>\r\n                    <div className=\"col-md-5\">Etsi, selaa ja valitse antureita:</div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-5\">\r\n                        <ASyncCreatableSelect\r\n                            key={JSON.stringify(this.state.value)}\r\n                            placeholder=\"Etsi/lisää karttoja...\"\r\n                            isClearable\r\n                            formatCreateLabel={userInput => `Lisää uusi kartta nimellä '${userInput}'...`}\r\n                            defaultOptions={this.props.kartat}\r\n                            isDisabled={this.state.isLoading}\r\n                            onInputChange={inputValue => (\r\n                                inputValue.length <= this.state.maxKarttaInputLenght ? inputValue : inputValue.substr(0, this.state.maxKarttaInputLenght))\r\n                            }\r\n                            loadOptions={this.promiseKartat}\r\n                            isLoading={this.state.isLoading}\r\n                            onChange={this.handleKChange}\r\n                            onCreateOption={this.handleCreate}\r\n                            value={this.state.kartta}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-5\">\r\n                        <ASyncSelect\r\n                            placeholder=\"Selaa antureita\"\r\n                            defaultOptions={this.props.anturit}\r\n                            loadOptions={this.promiseAnturit}\r\n                            onChange={this.handleAChange}\r\n                            value={this.state.anturi}\r\n                            onInputChange={inputValue => (\r\n                                inputValue.length <= this.state.maxInputLenght ? inputValue : inputValue.substr(0, this.state.maxInputLenght))\r\n                            }\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    {LisaysModal}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//PropTypes\r\nValintalaatikko.propTypes = {\r\n    kartat: PropTypes.array.isRequired,\r\n    anturit: PropTypes.array.isRequired,\r\n    addKartta: PropTypes.func.isRequired,\r\n    setSelectedKartta: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Valintalaatikko","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactEcharts from 'echarts-for-react';\r\n\r\nexport class Graafit extends Component {\r\n\r\n// lämpötila-graafin ehdot\r\n  getLOption = () => ({\r\n    title: {\r\n      text: 'Lämpötila'\r\n    },\r\n    tooltip: {\r\n      trigger: 'axis'\r\n    },\r\n    xAxis: {\r\n      type: 'category',\r\n      name: 'aika',\r\n      nameLocation: 'center',\r\n      nameTextStyle: {fontSize: 16, fontWeight: 'bold'}, \r\n      nameGap: 30,\r\n      data: this.props.ajat\r\n    },\r\n    yAxis: {\r\n      type: 'value',\r\n      max: 'dataMax',\r\n      min: 'dataMin',\r\n      name: '°C',\r\n      nameRotate: 90,\r\n      nameLocation: 'center',\r\n      nameTextStyle: {fontSize: 16, fontWeight: 'bold'}, \r\n      nameGap: 45\r\n    },\r\n    series: [{\r\n      data: this.props.lampotilat,\r\n      type: 'line',\r\n      sampling: 'average'\r\n    }]\r\n  })\r\n\r\n// ilmanpaine-graafin ehdot\r\n  getPOption = () => ({\r\n    title: {\r\n      text: 'Ilmanpaine'\r\n    },\r\n    tooltip: {\r\n      trigger: 'axis'\r\n    },\r\n    xAxis: {\r\n      type: 'category',\r\n      name: 'aika',\r\n      nameLocation: 'center',\r\n      nameTextStyle: {fontSize: 16, fontWeight: 'bold'}, \r\n      nameGap: 30,\r\n      data: this.props.ajat\r\n    },\r\n    yAxis: {\r\n      type: 'value',\r\n      max: 'dataMax',\r\n      min: 'dataMin',\r\n      name: 'hPa',\r\n      nameRotate: 90,\r\n      nameLocation: 'center',\r\n      nameTextStyle: {fontSize: 16, fontWeight: 'bold'}, \r\n      nameGap: 45\r\n    },\r\n    series: [{\r\n      data: this.props.paineet,\r\n      type: 'line'\r\n    }]\r\n  })\r\n\r\n// ilmankosteus-graafin ehdot\r\n  getKOption = () => ({\r\n    title: {\r\n      text: 'Ilmankosteus'\r\n    },\r\n    tooltip: {\r\n      trigger: 'axis'\r\n    },\r\n    xAxis: {\r\n      type: 'category',\r\n      name: 'aika',\r\n      nameLocation: 'center',\r\n      nameTextStyle: {fontSize: 16, fontWeight: 'bold'}, \r\n      nameGap: 30,\r\n      data: this.props.ajat\r\n    },\r\n    yAxis: {\r\n      type: 'value',\r\n      max: 'dataMax',\r\n      min: 'dataMin',\r\n      name: 'Ilman suhteellinen kosteus %',\r\n      nameRotate: 90,\r\n      nameLocation: 'center',\r\n      nameTextStyle: {fontSize: 16, fontWeight: 'bold'}, \r\n      nameGap: 45\r\n    },\r\n    series: [{\r\n      data: this.props.kosteudet,\r\n      type: 'line'\r\n    }]\r\n  })\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ReactEcharts option={this.getLOption()} style={{ width: '100%', height: 400 }} />\r\n        <ReactEcharts option={this.getPOption()} style={{ width: '100%', height: 400 }} />\r\n        <ReactEcharts option={this.getKOption()} style={{ width: '100%', height: 400 }} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nGraafit.propTypes = {\r\n  lampotilat: PropTypes.array,\r\n  ajat: PropTypes.array,\r\n  kosteudet: PropTypes.array,\r\n  paineet: PropTypes.array,\r\n  getMittaukset: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Graafit\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class Mittausrivi extends Component {\r\n  render() {\r\n    return (\r\n        <tr>\r\n            <td>{this.props.mittaus.Time}</td>\r\n            <td>{this.props.mittaus.temperature}</td>\r\n            <td>{this.props.mittaus.pressure}</td>\r\n            <td>{this.props.mittaus.humidity}%</td>\r\n        </tr>\r\n    )\r\n  }\r\n}\r\n\r\nMittausrivi.propTypes = {\r\n    mittaus: PropTypes.object.isRequired\r\n}\r\nexport default Mittausrivi\r\n","import React, { Component } from 'react';\r\nimport Mittausrivi from './Mittausrivi';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class Mittaukset extends Component {\r\n\r\n    render() {\r\n        return this.props.mittaukset.map((mittaus) => (\r\n            <Mittausrivi className=\"mittausrivi\" key={mittaus.messageId} mittaus={mittaus} />\r\n        ));\r\n    }\r\n}\r\n\r\nMittaukset.propTypes = {\r\n    mittaukset: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Mittaukset\r\n","import React, { Component } from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Mittaukset from './Mittaukset';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class Mittaustaulu extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.alariviRef = React.createRef()\r\n    }\r\n\r\n    state = {\r\n        amount: 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n            if (this.props.mittaukset.length > this.state.amount) {\r\n                this.scrollToBottom();\r\n                this.setState({\r\n                    amount: this.props.mittaukset.length\r\n                })\r\n            }\r\n        \r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        this.alariviRef.current.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });\r\n    }\r\n    render() {\r\n        return (\r\n            <Table striped bordered hover size=\"sm\" style={{ textAlign: 'center', width: '100%', height: '500px', overflowY: 'scroll', display: 'inline-block' }}>\r\n                <thead style={{width: '700px'}}>\r\n                    <tr> \r\n                        <th className=\"mittaus-thead\">Aika</th>\r\n                        <th className=\"mittaus-thead\">Lämpötila</th>\r\n                        <th className=\"mittaus-thead\">Ilmanpaine</th>\r\n                        <th className=\"mittaus-thead\">Ilmankosteus</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody style={{width: '100%'}}>\r\n                    <Mittaukset className=\"mittaukset\" mittaukset={this.props.mittaukset} />\r\n                    <tr ref={this.alariviRef} />\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n\r\nMittaustaulu.propTypes = {\r\n    mittaukset: PropTypes.array.isRequired\r\n}\r\nexport default Mittaustaulu\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nexport class AnturiOnline extends Component {\r\n    render() {\r\n\r\n        /*\r\n         * Seuraavissa if-ehdoissa tarkistetaan, onko viimeisimmästä mittauksesta mennyt yli 30 sekuntia (30000ms)\r\n         * Jos on, näytetään yhteysvirheilmoitus\r\n         * Muutoin näytetään anturien tila: aktiivinen tai ei päällä (jos (Ruuvitag) anturit lähettävät dataa, jossa kaikki mittausarvot ovat 0, anturi on silloin kiinni)\r\n         */\r\n        let dateString = \"\";\r\n        let split1 = [];\r\n        let split2 = [];\r\n        let mit = 0;\r\n        if (typeof this.props.mittaukset[this.props.mittaukset.length - 1] !== 'undefined') {\r\n            // muutetaan aika-string muotoon, jossa Date-objekti tunnistaa sen\r\n            dateString = this.props.mittaukset[this.props.mittaukset.length - 1].Time;\r\n            dateString = dateString.replace(/\\./g, '-').replace(/ /, 'T');\r\n            split1 = dateString.split('-');\r\n            split2 = split1[2].split('T');\r\n\r\n            // millisekunnit (nykyhetki - 01.01.1970) - (mittausajankohta - 01.01.1970)\r\n            mit = new Date() - new Date(split2[0] + \"-\" + split1[1] + \"-\" + split1[0] + \"T\" + [split2[1]]);\r\n        }\r\n        // erotus alle 30000 ms, odotetaan uutta mittausta. Anturi aktiivinen\r\n        if (this.props.selectedAnturi !== null && this.props.online === true && mit < 30000) {\r\n            return (\r\n                <Alert show={this.props.online} variant={\"success\"} >\r\n                    <Alert.Heading>{this.props.selectedAnturi.label} {this.props.selectedAnturi.value}</Alert.Heading>\r\n                    <p>Anturi aktiivinen!</p>\r\n                </Alert>\r\n            )\r\n        }\r\n        // erotus alle 30000 ms, odotetaan uutta mittausta. Anturi ei päällä\r\n        if (this.props.selectedAnturi !== null && this.props.online === false && mit < 30000) {\r\n            return (\r\n                <Alert show={!this.props.online} variant={\"danger\"} >\r\n                    <Alert.Heading>{this.props.selectedAnturi.label} {this.props.selectedAnturi.value}</Alert.Heading>\r\n                    <p>Anturi ei ole päällä!</p>\r\n                </Alert>\r\n            )\r\n        }\r\n        // erotus yli 30000 ms, näytetään virhe\r\n        if (this.props.selectedAnturi !== null && (this.props.online === false || this.props.online === true) && mit > 30000) {\r\n            return (\r\n                <Alert show={true} variant={\"danger\"} >\r\n                    <Alert.Heading>Yhteysvirhe</Alert.Heading>\r\n                    <p>Ei uusia mittauksia 30 sekuntiin, yhteys katkennut!</p>\r\n                </Alert>\r\n            )\r\n        }\r\n        else return null;\r\n    }\r\n}\r\n\r\nAnturiOnline.propTypes = {\r\n    mittaukset: PropTypes.array.isRequired,\r\n    online: PropTypes.bool,\r\n    selectedAnturi: PropTypes.object\r\n}\r\nexport default AnturiOnline;\r\n","import React, { Component } from 'react';\nimport Kartta from './components/Kartta';\nimport Valintalaatikko from './components/Valintalaatikko';\nimport Graafit from './components/Graafit';\nimport Mittaustaulu from './components/Mittaustaulu';\nimport AnturiOnline from './components/AnturiOnline';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Alert from 'react-bootstrap/Alert';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Axios from 'axios';\n\nclass App extends Component {\n\n  state = {\n    kartat: [],\n    mittaukset: [],\n    anturit: [],\n    anturiSijainnit: [],\n    selectedKartta: null,\n    selectedAnturi: null,\n    anturiOnline: false,\n    deleteSuccess: false\n  }\n\n  // haetaan kartat, kun pääkomponentti kiinnittyy\n  componentDidMount() {\n    this.getMittaukset();\n    this.getKartat();\n    this.getAnturit();\n    this.getAnturiSijainnit();\n  }\n\n  // aletaan seurata mittausten päivityksiä tietokannassa\n  componentWillMount() {\n    setInterval(this.getMittaukset.bind(this), 5000);\n  }\n\n  // palauttaa listan tietokannassa olevista kartoista\n  getKartat() {\n    Axios.get('http://localhost:3001/maps')\n      .then(res => this.setState({\n        kartat: this.returnKartat(res.data)\n      }));\n  }\n\n  // palauttaa listan tietokannassa olevista antureista\n  getAnturit() {\n    Axios.get('http://localhost:3001/sensors')\n      .then(res => this.setState({\n        anturit: this.returnAnturit(res.data)\n      }));\n  }\n\n  // palauttaa listan tietokannassa olevista anturien sijainneista\n  getAnturiSijainnit() {\n    Axios.get('http://localhost:3001/locations')\n      .then(res => this.setState({\n        anturiSijainnit: this.returnAnturiSijainnit(res.data)\n      }));\n  }\n\n  // haetaan mittaukset tietokannasta\n  getMittaukset() {\n    if (this.state.selectedAnturi !== null) {\n      Axios.get(`http://localhost:3001/measurement?deviceId=${this.state.selectedAnturi.value}`)\n        .then(res => this.setState({\n          mittaukset: res.data\n        }));\n\n      if (typeof this.state.mittaukset[this.state.mittaukset.length - 1] !== 'undefined') {\n        if (this.state.mittaukset[this.state.mittaukset.length - 1].pressure !== 0) {\n          this.setState({\n            anturiOnline: true\n          })\n        } else {\n          this.setState({\n            anturiOnline: false\n          })\n        }\n      }\n    }\n  }\n\n  // tietokannasta haettu karttalista muotoon, jossa projektissa käytettävä kirjasto react-select pystyy käsittelemään sitä\n  returnKartat = (kartat) => {\n    let tmp = [];\n    kartat.map((kartta) => {\n      tmp.push({\n        id: kartta.ID,\n        label: kartta.NAME,\n        value: kartta.PATH\n      })\n      return 0;\n    })\n    return tmp;\n  }\n\n  // tietokannasta haettu karttalista muotoon, jossa projektissa käytettävä kirjasto react-select pystyy käsittelemään sitä\n  returnAnturit = (anturit) => {\n    let tmp = [];\n    anturit.map((anturi) => {\n      tmp.push({\n        id: anturi.ID,\n        label: anturi.NAME,\n        value: anturi.DESCRIPTION,\n        selected: false\n      })\n      return 0;\n    })\n    return tmp;\n  }\n\n  // anturiSijainnit stateen\n  returnAnturiSijainnit = (sijainnit) => {\n    let tmp = [];\n    sijainnit.map((sijainti) => {\n      tmp.push({\n        kartta_id: sijainti.KARTTA_ID,\n        anturi_id: sijainti.ANTURI_ID,\n        x: sijainti.X,\n        y: sijainti.Y,\n      })\n      return 0;\n    })\n    return tmp;\n  }\n\n  // lisätään kartan tiedot (nimi, osoite) tietokantaan\n  addKartta = (newKartta) => {\n    Axios.post('http://localhost:3001/maps', newKartta)\n      .then(res => {\n        this.getKartat();\n      });\n  }\n  // asetetaan valittu kartta\n  setSelectedKartta = (inputValue) => {\n    this.setState({ selectedKartta: inputValue });\n  }\n  // asetetaan valittu anturi\n  setSelectedAnturi = (inputValue) => {\n    if (this.state.selectedAnturi !== null && this.state.selectedAnturi.id !== inputValue.id) {\n      this.setState({ selectedAnturi: inputValue });\n    }\n    if (this.state.selectedAnturi === null) {\n      this.setState({ selectedAnturi: inputValue });\n    }\n  }\n  // sijainti anturille: jos sijainti kys. kartalle on jo, muokataan olemassa olevan rivin koordinaatteja\n  // muutoin lisätään uusi rivi\n  setSijainti = (x, y, kartta_id, anturi_id) => {\n    Axios.get(`http://localhost:3001/findlocation?kartta_id=${kartta_id}&anturi_id=${anturi_id}`)\n      .then(res => {\n        if (res.data.result === true) {\n          Axios.post('http://localhost:3001/updatelocation', { kartta_id: kartta_id, anturi_id: anturi_id, x: x, y: y })\n            .then(res => {\n              this.getAnturiSijainnit();\n              return;\n            });\n        } else {\n          Axios.post('http://localhost:3001/locations', { kartta_id: kartta_id, anturi_id: anturi_id, x: x, y: y })\n            .then(res => {\n              this.getAnturiSijainnit();\n              return;\n            });\n        }\n      });\n  }\n  // oletussijainti antureille: tarvitaan määrittäessä dragBounds-ehdot Anturi.js:ssä\n  setDefaultSijainti = (kartta_id, anturi_id) => {\n    this.setState({\n      anturiSijainnit: this.state.anturiSijainnit.push({\n        kartta_id: kartta_id,\n        anturi_id: anturi_id,\n        x: 0,\n        y: 0\n      })\n    })\n    return;\n  }\n\n  // palauttaa listan valitun anturin mittausten lämpötila-arvoista\n  returnLampotilaData() {\n    var temps = [];\n    let len = this.state.mittaukset.length;\n    if (this.state.selectedAnturi !== null) {\n      if (len <= 300) {\n        this.state.mittaukset.map((mittaus) => {\n          temps.push(mittaus.temperature);\n        })\n      } else {\n        this.state.mittaukset.map((mittaus) => {\n          temps.push(mittaus.temperature);\n        })\n        temps.splice(0, len - 300);\n      }\n    }\n    return temps;\n  }\n\n  // palauttaa listan valitun anturin mittausten ilmankosteusarvoista\n  returnKosteusData() {\n    var hums = [];\n    let len = this.state.mittaukset.length;\n    if (this.state.selectedAnturi !== null) {\n      if (len <= 300) {\n        this.state.mittaukset.map((mittaus) => {\n          hums.push(mittaus.humidity);\n        })\n      } else {\n        this.state.mittaukset.map((mittaus) => {\n          hums.push(mittaus.humidity);\n        })\n        hums.splice(0, len - 300);\n      }\n    }\n    return hums;\n  }\n\n  // palauttaa listan valitun anturin mittausten ilmanpainearvoista\n  returnPaineData() {\n    var pres = [];\n    let len = this.state.mittaukset.length;\n    if (this.state.selectedAnturi !== null) {\n      if (len <= 300) {\n        this.state.mittaukset.map((mittaus) => {\n          pres.push(mittaus.pressure);\n        })\n      } else {\n        this.state.mittaukset.map((mittaus) => {\n          pres.push(mittaus.pressure);\n        })\n        pres.splice(0, len - 300);\n      }\n    }\n    return pres;\n  }\n\n  // palauttaa listan valitun anturin mittausten aikaleimoista\n  returnTimeData() {\n    var tims = [];\n    let len = this.state.mittaukset.length;\n    if (this.state.selectedAnturi !== null) {\n      if (len <= 300) {\n        this.state.mittaukset.map((mittaus) => {\n          tims.push(mittaus.Time);\n        })\n      } else {\n        this.state.mittaukset.map((mittaus) => {\n          tims.push(mittaus.Time);\n        })\n        tims.splice(0, len - 300);\n      }\n    }\n    return tims;\n  }\n\n  // onko kartta valittuna\n  isKarttaSelected() {\n    if (this.state.selectedKartta !== null) {\n      return false;\n    }\n    return true;\n  }\n\n  // kartan poisto\n  deleteKartta() {\n    if (this.state.selectedKartta !== null) {\n      Axios.delete('http://localhost:3001/locations', {\n        params: {\n          id: this.state.selectedKartta.id\n        }\n      })\n        .then(res => {\n          Axios.delete('http://localhost:3001/maps', {\n            params: {\n              id: this.state.selectedKartta.id\n            }\n          })\n            .then(res => {\n              console.log(res.data);\n              this.setState({\n                selectedKartta: null\n              })\n              this.handleDeleteSuccess();\n              this.getKartat();\n              return;\n            })\n          return;\n        })\n    }\n  }\n\n  handleDeleteSuccess = () => {\n    new Promise(resolve => {\n        setTimeout(\n            resolve(this.setState({\n                deleteSuccess: true\n            }), 1000))\n    }).then(() => {\n        setTimeout(() => {\n            this.setState({\n                deleteSuccess: false\n            })\n        }, 1000);\n    })\n}\n\n  // renderöidään komponentti\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <Modal show={this.state.deleteSuccess}>\n            <Modal.Body>\n              <Alert variant=\"success\">\n                <p>Kartta poistettu onnistuneesti!</p>\n              </Alert>\n            </Modal.Body>\n          </Modal>\n          <header className=\"header\">\n            <h1 className=\"pageHeadline\">Mittaussovellus</h1>\n          </header>\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-md-8\">\n                <div className=\"main-content-kartta\">\n                  <Valintalaatikko\n                    kartat={this.state.kartat}\n                    anturit={this.state.anturit}\n                    setSelectedKartta={this.setSelectedKartta}\n                    setSelectedAnturi={this.setSelectedAnturi}\n                    addKartta={this.addKartta}\n                  />\n                  <Button\n                    variant=\"danger\"\n                    disabled={this.isKarttaSelected()}\n                    onClick={this.deleteKartta.bind(this)}\n                    style={{ margin: '5px' }}>\n                    Poista kartta\n                  </Button>\n                  <Kartta\n                    selectedKartta={this.state.selectedKartta}\n                    anturit={this.state.anturit}\n                    selectedAnturi={this.state.selectedAnturi}\n                    anturiSijainnit={this.state.anturiSijainnit}\n                    setSijainti={this.setSijainti}\n                    setDefaultSijainti={this.setDefaultSijainti}\n                  />\n                </div>\n              </div>\n              <div className=\"col-md-4\">\n                <div className=\"main-content-mittaukset\">\n                  <AnturiOnline\n                    online={this.state.anturiOnline}\n                    selectedAnturi={this.state.selectedAnturi}\n                    mittaukset={this.state.mittaukset}\n                  />\n                  <Mittaustaulu\n                    mittaukset={this.state.mittaukset}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className=\"graafit\">\n                  <Graafit\n                    getMittaukset={this.getMittaukset}\n                    lampotilat={this.returnLampotilaData()}\n                    kosteudet={this.returnKosteusData()}\n                    paineet={this.returnPaineData()}\n                    ajat={this.returnTimeData()}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n          <footer className=\"footer\">\n            <h4>Karttapohjainen mittaussovellus</h4>\n            Ohjelmistotuotanto 2, Ryhmä T\n          </footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}